#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::storage::StorageFormat;
use crate::storage::StorageGroup;
use crate::storage::StoragePassword;

// Section: wire functions

fn wire_storage_default_save_path_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "storage_default_save_path",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            move |task_callback| storage_default_save_path(api_storage_format)
        },
    )
}
fn wire_storage_check_init_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "storage_check_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            let api_path = path.wire2api();
            move |task_callback| storage_check_init(api_storage_format, api_path)
        },
    )
}
fn wire_storage_init_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    master_key: impl Wire2Api<String> + UnwindSafe,
    force: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "storage_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            let api_path = path.wire2api();
            let api_master_key = master_key.wire2api();
            let api_force = force.wire2api();
            move |task_callback| {
                storage_init(api_storage_format, api_path, api_master_key, api_force)
            }
        },
    )
}
fn wire_storage_show_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    master_key: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StorageGroup>(
        WrapInfo {
            debug_name: "storage_show",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            let api_path = path.wire2api();
            let api_master_key = master_key.wire2api();
            move |task_callback| storage_show(api_storage_format, api_path, api_master_key)
        },
    )
}
fn wire_storage_add_group_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    master_key: impl Wire2Api<String> + UnwindSafe,
    group: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "storage_add_group",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            let api_path = path.wire2api();
            let api_master_key = master_key.wire2api();
            let api_group = group.wire2api();
            move |task_callback| {
                storage_add_group(api_storage_format, api_path, api_master_key, api_group)
            }
        },
    )
}
fn wire_storage_add_password_impl(
    port_: MessagePort,
    storage_format: impl Wire2Api<StorageFormat> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    master_key: impl Wire2Api<String> + UnwindSafe,
    group: impl Wire2Api<String> + UnwindSafe,
    title: impl Wire2Api<String> + UnwindSafe,
    username: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "storage_add_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_storage_format = storage_format.wire2api();
            let api_path = path.wire2api();
            let api_master_key = master_key.wire2api();
            let api_group = group.wire2api();
            let api_title = title.wire2api();
            let api_username = username.wire2api();
            let api_password = password.wire2api();
            move |task_callback| {
                storage_add_password(
                    api_storage_format,
                    api_path,
                    api_master_key,
                    api_group,
                    api_title,
                    api_username,
                    api_password,
                )
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<StorageFormat> for i32 {
    fn wire2api(self) -> StorageFormat {
        match self {
            0 => StorageFormat::Kdbx4,
            1 => StorageFormat::Json,
            _ => unreachable!("Invalid variant for StorageFormat: {}", self),
        }
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for StorageGroup {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.title.into_into_dart().into_dart(),
            self.sub_group.into_into_dart().into_dart(),
            self.sub_password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StorageGroup {}
impl rust2dart::IntoIntoDart<StorageGroup> for StorageGroup {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for StoragePassword {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.title.into_into_dart().into_dart(),
            self.username.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StoragePassword {}
impl rust2dart::IntoIntoDart<StoragePassword> for StoragePassword {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
